#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <termios.h>
#include <unistd.h>

#define MAX_NOME 50
#define MAX_EMAIL 50
#define MAX_SENHA 20
#define MAX_CPF 15
#define MAX_ENDERECO 100
#define MAX_CEP 10
#define MAX_CIDADE 30
#define MAX_BAIRRO 30
#define EMPRESA "ABK Bus Lines"
#define ADMIN_SENHA "admin"

// Estrutura para armazenar os dados do usuário
typedef struct {
    char nome[MAX_NOME];
    char email[MAX_EMAIL];
    char senha[MAX_SENHA];
    char cpf[MAX_CPF];
    char cep[MAX_CEP];
    char rua[MAX_ENDERECO];
    char cidade[MAX_CIDADE];
    char bairro[MAX_BAIRRO];
} Usuario;

Usuario usuarios[100];  // Vetor para armazenar usuários cadastrados
int num_usuarios = 0;   // Contador de usuários cadastrados
int passagens_vendidas = 0;  // Contador de passagens vendidas

// Função para esconder a senha digitada em todas as plataformas
void digitarSenha(char senha[]) {
    struct termios oldt, newt;
    int i = 0;
    char ch;

    // Desabilita o eco de terminal
    tcgetattr(STDIN_FILENO, &oldt);  // Salva a configuração atual do terminal
    newt = oldt;
    newt.c_lflag &= ~(ECHO);  // Desativa o eco
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);  // Aplica a nova configuração

    // Leitura da senha com eco desativado
    while ((ch = getchar()) != '\n' && i < MAX_SENHA - 1) {
        if (ch == 127 || ch == '\b') {  // Tratamento de backspace
            if (i > 0) {
                printf("\b \b");  // Remove o último asterisco
                i--;
            }
        } else {
            senha[i++] = ch;
            printf("*");  // Exibe um asterisco para cada caractere digitado
        }
    }

    senha[i] = '\0';  // Termina a string da senha

    // Restaura a configuração original do terminal
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    printf("\n");
}

// Função para verificar se o CPF tem exatamente 11 dígitos
int verificarCPF(char cpf[]) {
    if (strlen(cpf) != 11) {
        return 0;  // CPF deve ter exatamente 11 dígitos
    }

    // Verifica se todos os caracteres são dígitos
    for (int i = 0; i < 11; i++) {
        if (!isdigit(cpf[i])) {
            return 0;  // Se encontrar um caractere que não é dígito, retorna 0
        }
    }
    return 1;  // CPF válido
}

// Função para verificar se o e-mail contém o caractere '@'
int verificarEmail(char email[]) {
    return strchr(email, '@') != NULL;  // Retorna 1 se encontrar '@', 0 caso contrário
}

// Função para realizar o cadastro do usuário
int cadastroUsuario() {
    Usuario novo_usuario;
    char confirmar_senha[MAX_SENHA];

    printf("\n--- Menu de Cadastro ---\n");

    // Captura o nome do usuário
    printf("Digite o seu nome: ");
    fgets(novo_usuario.nome, MAX_NOME, stdin);
    novo_usuario.nome[strcspn(novo_usuario.nome, "\n")] = 0;

    // Captura o e-mail do usuário e faz a verificação
    do {
        printf("Digite o seu e-mail: ");
        fgets(novo_usuario.email, MAX_EMAIL, stdin);
        novo_usuario.email[strcspn(novo_usuario.email, "\n")] = 0;

        if (!verificarEmail(novo_usuario.email)) {
            printf("Erro: O e-mail deve conter '@'. Tente novamente.\n");
        }
    } while (!verificarEmail(novo_usuario.email));

    // Captura a senha e a confirmação de senha
    do {
        printf("Digite a sua senha: ");
        digitarSenha(novo_usuario.senha);

        printf("Confirme a sua senha: ");
        digitarSenha(confirmar_senha);

        if (strcmp(novo_usuario.senha, confirmar_senha) != 0) {
            printf("Erro: As senhas não são iguais. Tente novamente.\n");
        }
    } while (strcmp(novo_usuario.senha, confirmar_senha) != 0);

    // Captura o CPF do usuário e faz a verificação
    do {
        printf("Digite o seu CPF (apenas números): ");
        fgets(novo_usuario.cpf, MAX_CPF, stdin);
        novo_usuario.cpf[strcspn(novo_usuario.cpf, "\n")] = 0;

        if (!verificarCPF(novo_usuario.cpf)) {
            printf("Erro: O CPF Inválido Tente novamente.\n");
        }
    } while (!verificarCPF(novo_usuario.cpf));

    // Captura o endereço do usuário
    printf("\n--- Cadastro de Endereço ---\n");
    printf("Digite o CEP: ");
    fgets(novo_usuario.cep, MAX_CEP, stdin);
    novo_usuario.cep[strcspn(novo_usuario.cep, "\n")] = 0;

    printf("Digite a Rua: ");
    fgets(novo_usuario.rua, MAX_ENDERECO, stdin);
    novo_usuario.rua[strcspn(novo_usuario.rua, "\n")] = 0;

    printf("Digite a Cidade: ");
    fgets(novo_usuario.cidade, MAX_CIDADE, stdin);
    novo_usuario.cidade[strcspn(novo_usuario.cidade, "\n")] = 0;

    printf("Digite o Bairro: ");
    fgets(novo_usuario.bairro, MAX_BAIRRO, stdin);
    novo_usuario.bairro[strcspn(novo_usuario.bairro, "\n")] = 0;

    // Adiciona o novo usuário à lista de usuários
    usuarios[num_usuarios] = novo_usuario;
    num_usuarios++;

    printf("\nCadastro concluído com sucesso!\n");
    return num_usuarios - 1;  // Retorna o índice do novo usuário
}

// Função para exibir as informações do usuário
void verInformacoes(Usuario *usuario) {
    printf("\n--- Informações do Passageiro ---\n");
    printf("Nome: %s\n", usuario->nome);
    printf("E-mail: %s\n", usuario->email);
    printf("CPF: %s\n", usuario->cpf);
    printf("\n--- Endereço ---\n");
    printf("CEP: %s\n", usuario->cep);
    printf("Rua: %s\n", usuario->rua);
    printf("Cidade: %s\n", usuario->cidade);
    printf("Bairro: %s\n", usuario->bairro);
    printf("------------------------------\n");
}

// Função para exibir o relatório de passagens vendidas
void relatorioPassagensVendidas() {
    printf("\n--- Relatório de Passagens Vendidas ---\n");
    printf("Total de passagens vendidas: %d\n", passagens_vendidas);
    printf("--------------------------------------\n");
}

// Função para exibir as informações da viagem e comprar passagem
void mostrarInformacoesViagem(char nome[], char cpf[], char origem[], char destino[], float valor, int horas_embarque, int minutos_embarque, int duracao_horas, int duracao_minutos, float distancia, int atraso_horas) {
    int hora_chegada = horas_embarque + duracao_horas;
    int minuto_chegada = minutos_embarque + duracao_minutos;

    // Ajustar minutos e horas se os minutos ultrapassarem 60
    if (minuto_chegada >= 60) {
        minuto_chegada -= 60;
        hora_chegada += 1;
    }

    // Ajustar para formato de 24 horas
    if (hora_chegada >= 24) {
        hora_chegada -= 24;
    }

    printf("\n--- Ticket de Viagem | %s ---\n", EMPRESA);
    printf("Nome do Passageiro: %s\n", nome);
    printf("CPF do Passageiro: %s\n", cpf);
    printf("Origem: %s\n", origem);
    printf("Destino: %s\n", destino);
    printf("Valor da Passagem: R$ %.2f\n", valor);
    printf("Horário de Embarque: %02d:%02d\n", horas_embarque, minutos_embarque);
    printf("Distância: %.2f km\n", distancia);
    printf("Horário de Chegada: %02d:%02d\n", hora_chegada, minuto_chegada);
    if (atraso_horas > 0) {
        printf("Atenção: Esta viagem está com um atraso de %d horas!\n", atraso_horas);
    }
    printf("--------------------------------\n");
}

// Função principal
int main() {
    int opcao_principal;

    // Exibe a saudação inicial com o nome da empresa
    printf("Bem-vindo à %s!\n", EMPRESA);

    do {
        printf("\n--- Menu Principal | %s ---\n", EMPRESA);
        printf("1. Login como Usuário\n");
        printf("2. Login como Administrador\n");
        printf("3. Cadastro de Usuário\n");
        printf("0. Sair\n");
        printf("Digite sua opção: ");
        scanf("%d", &opcao_principal);
        getchar();  // Limpar o buffer de entrada após o scanf

        switch (opcao_principal) {
            case 1:
                printf("Login de usuário ainda não implementado.\n");
                break;
            case 2:
                printf("Login de administrador ainda não implementado.\n");
                break;
            case 3:
                cadastroUsuario();  // Cadastrar novo usuário
                break;
            case 0:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida! Por favor, selecione uma opção válida.\n");
                break;
        }
    } while (opcao_principal != 0);  // Loop até que o usuário escolha sair

    return 0;
}
